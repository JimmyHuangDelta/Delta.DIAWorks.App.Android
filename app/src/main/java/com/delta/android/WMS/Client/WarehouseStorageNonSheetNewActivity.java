package com.delta.android.WMS.Client;

import android.content.Context;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.SimpleAdapter;
import android.widget.Spinner;

import com.delta.android.Core.Activity.BaseFlowActivity;
import com.delta.android.Core.DataTable.DataRow;
import com.delta.android.Core.DataTable.DataTable;
import com.delta.android.Core.WebApiClient.BModuleObject;
import com.delta.android.Core.WebApiClient.BModuleReturn;
import com.delta.android.Core.WebApiClient.ParameterInfo;
import com.delta.android.Core.WebApiClient.WebAPIClientEvent;
import com.delta.android.R;
import com.delta.android.WMS.Param.BIWMSFetchInfoParam;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Vector;

public class WarehouseStorageNonSheetNewActivity extends BaseFlowActivity {

    // region -- MST 控制項 / MST Widgets --
    private Spinner cmbSheetType, cmbOrgan;
    private Button btnAddWsDet;
    // endregion

    // region -- MST 變數 / Mst Variables --
    private String sheetTypeKey = "", sheetTypeId = "", organId = "";
    private String wvSource = "WMS"; // Hard Code WMS, 因為人員使用無單據入庫作業入庫產生的單據一定是 WMS 開立的 / Hard Code WMS, because the sheet generated by personnel using this operation must be issued by WMS
    private List<? extends Map<String, Object>> lstSheetType;
    private List<? extends Map<String, Object>> lstOrgan;
    // endregion

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_warehouse_storage_non_sheet_new);

        setInitWidget();

        getSpinnerInitData();

        setListeners();
    }

    /**
     * 元件初始化
     * Component initialization
     */
    private void setInitWidget() {
        cmbSheetType = findViewById(R.id.cmbWarehouseSheetType);
        cmbOrgan = findViewById(R.id.cmbOrgan);
        btnAddWsDet = findViewById(R.id.btnAddWarehousStorageDet);
    }

    /**
     * 取得下拉選單資料並放入Spinner內
     * Get drop-down menu data and put it into Spinner
     */
    private void getSpinnerInitData() {

        //region Set Param
        ArrayList<BModuleObject> lsBObj = new ArrayList<>();

        //單據類型/Sheet Type
        BModuleObject bmObjSheetType = new BModuleObject();
        bmObjSheetType.setBModuleName("Unicom.Uniworks.BModule.WMS.Library.BIWMSFetchInfo");
        bmObjSheetType.setModuleID("BIFetchSheetType"); // 原 BIFetchWmsSheetConfig => 如果沒有設定 Config 就會抓不到 Sheet Type
        bmObjSheetType.setRequestID("BIFetchSheetType");

        bmObjSheetType.params = new Vector<>();
        ParameterInfo param1 = new ParameterInfo();
        param1.setParameterID(BIWMSFetchInfoParam.Filter);
        param1.setParameterValue("  AND P.SHEET_TYPE_POLICY_ID = 'Warehouse' AND T.SHEET_TYPE_ID = 'SysWarehouse' ");
        bmObjSheetType.params.add(param1);
        lsBObj.add(bmObjSheetType);

        //部門/Organ
        BModuleObject bmObjCustomer = new BModuleObject();
        bmObjCustomer.setBModuleName("Unicom.Uniworks.BModule.WMS.Library.BIWMSFetchInfo");
        bmObjCustomer.setModuleID("BIFetchOrgan");
        bmObjCustomer.setRequestID("BIFetchOrgan");
        lsBObj.add(bmObjCustomer);

        CallBIModule(lsBObj, new WebAPIClientEvent() {
            @Override
            public void onPostBack(BModuleReturn bModuleReturn) {
                if (CheckBModuleReturnInfo(bModuleReturn)) {
                    DataTable dtSheetType = bModuleReturn.getReturnJsonTables().get("BIFetchSheetType").get("SHEET_TYPE");
                    DataTable dtOrgan = bModuleReturn.getReturnJsonTables().get("BIFetchOrgan").get("ORGAN");

                    DataRow drDefaultItem = dtSheetType.newRow();
                    drDefaultItem.setValue("IDNAME", ""); // 下拉選單default空白/Drop-down menu default blank

                    // region -- 單據類型/Sheet Type --
                    if (dtSheetType != null && dtSheetType.Rows.size() > 0)
                        dtSheetType.Rows.add(drDefaultItem);
                    lstSheetType = (List<? extends Map<String, Object>>) dtSheetType.toListHashMap();
                    SimpleAdapter adapterShtType = new SimpleArrayAdapter<>(WarehouseStorageNonSheetNewActivity.this, lstSheetType, android.R.layout.simple_spinner_item, new String[]{"SHEET_TYPE_KEY", "SHEET_TYPE_ID", "IDNAME"}, new int[]{0, android.R.id.text1, 0});
                    adapterShtType.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                    cmbSheetType.setAdapter(adapterShtType);
                    if (lstSheetType.size() > 2)
                        cmbSheetType.setSelection(lstSheetType.size()-1, true);
                    else
                        cmbSheetType.setSelection(0, true);
                    // endregion

                    // region -- 部門/Organ --
                    if (dtOrgan != null && dtOrgan.Rows.size() > 0)
                        dtOrgan.Rows.add(drDefaultItem);
                    lstOrgan = (List<? extends Map<String, Object>>) dtOrgan.toListHashMap();
                    SimpleAdapter adapterOrgan = new SimpleArrayAdapter<>(WarehouseStorageNonSheetNewActivity.this, lstOrgan, android.R.layout.simple_spinner_item, new String[]{"ORGAN_KEY", "ORGAN_ID", "IDNAME"}, new int[]{0, android.R.id.text1, 0});
                    adapterOrgan.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                    cmbOrgan.setAdapter(adapterOrgan);
                    if (lstSheetType.size() > 2)
                        cmbSheetType.setSelection(lstSheetType.size()-1, true);
                    else
                        cmbSheetType.setSelection(0, true);
                    // endregion

                }
            }
        });
    }

    /**
     * 設置監聽事件
     * Set up listening events
     */
    private void setListeners() {
        cmbSheetType.setOnItemSelectedListener(onSelectSheetType);
        cmbOrgan.setOnItemSelectedListener(onSelectOrgan);
        btnAddWsDet.setOnClickListener(onClickAddWs);
    }

    /**
     * 選取單據類型下拉選單，取得Sheet Type Id等資訊
     * Select the drop-down list of document type to obtain information such as Sheet Type Id
     */
    private Spinner.OnItemSelectedListener onSelectSheetType = new AdapterView.OnItemSelectedListener() {

        @Override
        public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {

            sheetTypeId = "";
            sheetTypeKey = "";

            if (position != lstSheetType.size()-1) {
                Map<String, String> sheetTypeMap = (Map<String, String>)parent.getItemAtPosition(position);
                sheetTypeId = sheetTypeMap.get("SHEET_TYPE_ID");
                sheetTypeKey = sheetTypeMap.get("SHEET_TYPE_KEY");
            }
        }

        @Override
        public void onNothingSelected(AdapterView<?> parent) {

        }
    };

    /**
     * 選取部門下拉選單，取得Organ Id等資訊
     * Select the department drop-down menu to obtain information such as Organ Id
     */
    private Spinner.OnItemSelectedListener onSelectOrgan = new AdapterView.OnItemSelectedListener() {

        @Override
        public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {

            organId = "";

            if (position != lstOrgan.size()-1) {
                Map<String, String> organMap = (Map<String, String>)parent.getItemAtPosition(position);
                organId = organMap.get("ORGAN_ID");
            }
        }

        @Override
        public void onNothingSelected(AdapterView<?> parent) {

        }
    };

    /**
     * 點選新增入庫明細，將單據、部門、單據來源資訊傳入下個Activity (WarehouseStorageNonSheetNewDetailActivity)
     * Click Add Warehouse Storage Details to transfer the sheet type, organ and  sheet source information to the next Activity (WarehouseStorageNonSheetNewDetailActivity)
     */
    private View.OnClickListener onClickAddWs = new View.OnClickListener() {

        @Override
        public void onClick(View v) {

            if (sheetTypeId.length() <= 0) {

                // WAPG010005    請選擇單據類型!
                ShowMessage(R.string.WAPG010005);
                return;
            }

            Bundle mstInfo = new Bundle();
            mstInfo.putString("sheetTypeId", sheetTypeId);
            mstInfo.putString("organId", organId);
            mstInfo.putString("wvSource", wvSource);
            gotoNextActivity(WarehouseStorageNonSheetDetailNewActivity.class, mstInfo);
        }
    };

    /**
     * 複寫 SimpleAdapter ，點選下拉選單時不顯示最後一項
     * Owrite SimpleAdapter,  the last item is not displayed when the drop-down menu is clicked
     * @param <T>
     */
    private class SimpleArrayAdapter<T> extends SimpleAdapter {
        public SimpleArrayAdapter(Context context, List<? extends Map<String, ?>> data, int resource, String[] from, int[] to) {
            super(context, data, resource, from, to);
        }

        @Override
        public int getCount() {
            // don't display last item. It is used as hint.
            int count = super.getCount();
            return count > 0 ? count - 1 : count;
        }
    }
}

// ErrorCode
// WAPG010005    請選擇單據類型!